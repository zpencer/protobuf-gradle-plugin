// A minimal example kotlin project that uses the protobuf plugin.
// To build it:
// $ ../gradlew clean build

apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

repositories {
  maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
  ext.kotlin_version = '1.2.0'
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    // kotlin integration added since 0.8.4
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

dependencies {
  compile 'com.google.protobuf:protobuf-java:3.0.0'
  compile 'io.grpc:grpc-stub:1.0.0-pre2'
  compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
  // Extra proto source files besides the ones residing under
  // "src/main".
  protobuf files("lib/protos.tar.gz")
  protobuf fileTree("ext/")

  testCompile 'junit:junit:4.12'
  // KotlinFooTest.kt needs reflection utilities
  testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  // Extra proto source files for test besides the ones residing under
  // "src/test".
  testProtobuf files("lib/protos-test.tar.gz")
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
  }
  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
}
